

// User.java package com.example.demo.model; import javax.persistence.*; import java.io.Serializable; @Entity @Table(name = "users") public class User implements Serializable { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id; @Column(nullable = false, unique = true) private String username; @Column(nullable = false, unique = true) private String email; @Column(nullable = false) private String password; @Column(nullable = false) private int age; @Column(nullable = false, unique = true) private String phone; // getters and setters } // UserRepository.java package com.example.demo.repository; import com.example.demo.model.User; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.stereotype.Repository; @Repository public interface UserRepository extends JpaRepository { User findByUsername(String username); User findByEmail(String email); boolean existsByUsername(String username); boolean existsByEmail(String email); } // UserService.java package com.example.demo.service; import com.example.demo.model.User; import com.example.demo.repository.UserRepository; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.security.crypto.password.PasswordEncoder; import org.springframework.stereotype.Service; @Service public class UserService { @Autowired private UserRepository userRepository; @Autowired private PasswordEncoder passwordEncoder; public User register(User user) { // validate user information if (user.getUsername() == null || user.getUsername().isEmpty()) { throw new IllegalArgumentException("Username cannot be null or empty"); } if (user.getEmail() == null || user.getEmail().isEmpty()) { throw new IllegalArgumentException("Email cannot be null or empty"); } if (user.getPassword() == null || user.getPassword().isEmpty()) { throw new IllegalArgumentException("Password cannot be null or empty"); } if (user.getAge() <= 0) { throw new IllegalArgumentException("Age must be positive"); } if (user.getPhone() == null || user.getPhone().isEmpty()) { throw new IllegalArgumentException("Phone cannot be null or empty"); } // check if username or email already exists if (userRepository.existsByUsername(user.getUsername())) { throw new IllegalStateException("Username already taken"); } if (userRepository.existsByEmail(user.getEmail())) { throw new IllegalStateException("Email already registered"); } // encode password user.setPassword(passwordEncoder.encode(user.getPassword())); // save user to database return userRepository.save(user); } public User login(String username, String password) { // validate username and password if (username == null || username.isEmpty()) { throw new IllegalArgumentException("Username cannot be null or empty"); } if (password == null || password.isEmpty()) { throw new IllegalArgumentException("Password cannot be null or empty"); } // find user by username User user = userRepository.findByUsername(username); if (user == null) { throw new IllegalStateException("User not found"); } // verify password if (!passwordEncoder.matches(password, user.getPassword())) { throw new IllegalStateException("Invalid password"); } // return user return user; } } // UserController.java package com.example.demo.controller; import com.example.demo.model.User; import com.example.demo.service.UserService; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.*; @RestController @RequestMapping("/api/users") public class UserController { @Autowired private UserService userService; @PostMapping("/register") public ResponseEntity register(@RequestBody User user) { try { User newUser = userService.register(user); return ResponseEntity.ok(newUser); } catch (Exception e) { return ResponseEntity.badRequest().build(); } } @PostMapping("/login") public ResponseEntity login(@RequestParam String username, @RequestParam String password) { try { User user = userService.login(username, password); return ResponseEntity.ok(user); } catch (Exception e) { return ResponseEntity.badRequest().build(); } } } // WebSecurityConfig.java package com.example.demo.config; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; import org.springframework.security.crypto.password.PasswordEncoder; @Configuration public class WebSecurityConfig extends WebSecurityConfigurerAdapter { @Bean public PasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(); } } . The Edge wants to share a text with you.
